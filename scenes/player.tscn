[gd_scene load_steps=13 format=3 uid="uid://c1232bb68fhy6"]

[ext_resource type="Texture2D" uid="uid://cldwk3rcvt8hh" path="res://assets/player_new.png" id="2_8yosa"]
[ext_resource type="Texture2D" uid="uid://b4utmi0oj1lxd" path="res://assets/shadow.png" id="2_pc3o8"]
[ext_resource type="Texture2D" uid="uid://bx0qlsrfsx011" path="res://assets/pointlight.webp" id="4_c5nf6"]

[sub_resource type="Shader" id="Shader_6dngu"]
code = "shader_type canvas_item;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	// Called for every pixel the material is visible on.
}

//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_der1l"]
shader = SubResource("Shader_6dngu")

[sub_resource type="GDScript" id="GDScript_dy3ap"]
script/source = "extends CharacterBody2D

@export var MAX_SPEED = 800.0
@export var T_MAX_SPEED = 0.75
@export var T_STOP = 0.75
@export var tilt_speed = 5.0
@export var max_tilt_angle = 15.0
@export var bounce_height = 10
@export var bounce_speed = 10.0
@export var damageFactor: float = 1.0

@onready var sprite = $Sprite2D
@onready var shadow = $shadow # Reference to the shadow Sprite2D
@onready var collision_shape = $CollisionShape2D

signal health_deplete

var health = 100.0
const DAMAGE_RATE = 20.0


var tilt_angle = 0.0
var time = 0.0
var initial_rect_position

func _ready():
	initial_rect_position = sprite.position

func _physics_process(delta):
	%ProgressBar.value = health
	var direction = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	velocity = handle_move(direction, delta)
	move_and_collide(velocity*delta)
	
	if velocity.x < 0: 
		$Sprite2D.flip_h = true
	else:
		$Sprite2D.flip_h = false
	
	time += delta
	var bounce_offset = sprite.scale.x + sin(bounce_speed*time)/(2*bounce_height)
	sprite.scale = Vector2(sprite.scale.x, -bounce_offset)
	
	# Tilt logic
	var target_tilt = 0.0
	if direction.x != 0:
		target_tilt = direction.x * max_tilt_angle
	tilt_angle = lerp(tilt_angle, target_tilt, tilt_speed * delta)
	
	# Apply the tilt to the player
	rotation_degrees = tilt_angle
	
	# Reverse tilt for the shadow to keep it straight
	shadow.rotation_degrees = -tilt_angle
	# Idle bounce
	if direction == Vector2.ZERO:
		var bounce_offset_jump = sin(time * bounce_speed) * bounce_height/16
		sprite.position = initial_rect_position + Vector2(0, bounce_offset_jump)
	else:
		sprite.position = initial_rect_position
	var overlapping_mobs = %HurtBox.get_overlapping_bodies()
	if overlapping_mobs.size() > 1:
		health -= (DAMAGE_RATE * overlapping_mobs.size() * delta)*0.1*damageFactor
		if health <= 0.0:
			health_deplete.emit()
			get_tree().change_scene_to_file(\"res://scenes/game_over.tscn\")

func _process(delta):
	# Smooth color change based on movement
	pass
	#color_rect.color = Color(r, g, b)

func handle_move(direction: Vector2, delta: float) -> Vector2:
	if direction.length_squared() > 0:
		return velocity_accel(delta, direction)
	else:
		return velocity_decel(delta)
		
func velocity_accel(delta: float, direction: Vector2) -> Vector2:
	velocity.clampf(0.0, MAX_SPEED)
	var speed = velocity.length() / MAX_SPEED
	var t: float = 1 - sqrt(1 - speed)
	if is_nan(t):
		t = 1
	var t_new: float = t + (delta/T_MAX_SPEED)
	if t_new >= 1:
		return direction.normalized() * MAX_SPEED
	var speed_new: float = clamp(1 - (1 - t_new)*(1 - t_new), 0 , 1)
	return direction.normalized() * speed_new * MAX_SPEED

func velocity_decel(delta: float) -> Vector2:
	var speed = velocity.clampf(0.0, MAX_SPEED).length() / MAX_SPEED
	var t: float = 1 - sqrt(speed)
	if is_nan(t):
		t = 1
	var t_new: float = t + (delta/T_STOP)
	if t_new >= T_STOP:
		return Vector2()
	var speed_new = clamp((1-t_new)*(1-t_new), 0, 1)
	return velocity.normalized() * speed_new * MAX_SPEED

func _on_first_aid_used(inc: int) -> void:
	health += inc
	
func _on_shield_shield_used(shieldTime: int, df: float) -> void:
	damageFactor = df
	var timer: Timer = Timer.new()
	add_child(timer)
	timer.wait_time = shieldTime
	timer.one_shot = true
	timer.start()
	await timer.timeout
	timer.queue_free()
	damageFactor = 1.0
"

[sub_resource type="Gradient" id="Gradient_dg3yn"]
offsets = PackedFloat32Array(0, 0.441704, 0.847534, 1)
colors = PackedColorArray(0.179995, 0.181356, 0.123274, 1, 0.975336, 0.975336, 0.975336, 1, 0.976644, 0.976644, 0.976644, 1, 1, 1, 1, 1)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_y4exp"]
size = Vector2(72, 129)

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_4s222"]
radius = 32.0055
height = 127.953

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6bs8r"]
bg_color = Color(1, 1, 1, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wkw4s"]
bg_color = Color(0.282968, 0.697788, 0.401912, 1)

[sub_resource type="OccluderPolygon2D" id="OccluderPolygon2D_7puaq"]
polygon = PackedVector2Array(-40, -69, 41, -69, 39, 68, -39, 68)

[node name="player" type="CharacterBody2D"]
material = SubResource("ShaderMaterial_der1l")
collision_mask = 4
motion_mode = 1
wall_min_slide_angle = 0.441568
script = SubResource("GDScript_dy3ap")

[node name="shadow" type="Sprite2D" parent="."]
modulate = Color(0.408329, 0.408329, 0.408329, 1)
self_modulate = Color(0.340339, 0.340339, 0.340339, 1)
position = Vector2(-4, 68)
texture = ExtResource("2_pc3o8")

[node name="CPUParticles2D" type="CPUParticles2D" parent="."]
position = Vector2(2, -48)
amount = 20
lifetime = 0.5
randomness = 1.0
lifetime_randomness = 1.0
emission_shape = 1
emission_sphere_radius = 15.0
direction = Vector2(0, 1)
spread = 20.0
gravity = Vector2(0, 0)
scale_amount_min = 5.0
scale_amount_max = 10.0
color = Color(0.929412, 0.109804, 0.141176, 1)
color_ramp = SubResource("Gradient_dg3yn")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 0.5)
shape = SubResource("RectangleShape2D_y4exp")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.8, 0.8)
texture = ExtResource("2_8yosa")
flip_v = true

[node name="PointLight2D" type="PointLight2D" parent="."]
visible = false
energy = 2.0
shadow_enabled = true
texture = ExtResource("4_c5nf6")
texture_scale = 3.42

[node name="HurtBox" type="Area2D" parent="."]
unique_name_in_owner = true
scale = Vector2(-1.87468, -1.56307)
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="HurtBox"]
shape = SubResource("CapsuleShape2D_4s222")

[node name="ProgressBar" type="ProgressBar" parent="."]
unique_name_in_owner = true
light_mask = 7
visibility_layer = 3
offset_left = -70.0
offset_top = -132.0
offset_right = -66.0
offset_bottom = -105.0
scale = Vector2(35.8032, 0.800667)
theme_override_styles/background = SubResource("StyleBoxFlat_6bs8r")
theme_override_styles/fill = SubResource("StyleBoxFlat_wkw4s")
value = 100.0
rounded = true
show_percentage = false

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
occluder = SubResource("OccluderPolygon2D_7puaq")
